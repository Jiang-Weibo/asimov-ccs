!!! -*- mode: F90 -*-

!> @brief Test module for mat_mod.f90
module test_vec

  use pFUnit
  
  use kinds, only : ccs_int, ccs_real
  use types, only : vector_values
  
  use vec

  implicit none

  private
  public :: test_vec_packing

contains

  !> @brief Test case to ensure packing vector elements doesn't result in out of range indices.
  !
  !> @details Packing vector elements may modify the index according to the backend in use,
  !!          however this should never result in an index range greater than the size of the
  !!          matrix, i.e. (idx_max - idx_min) <= N --- I suppose this is possible for a backend
  !!          using globally non-contiguous indices but that seems unlikely.
  @test
  subroutine test_vec_packing()

    use utils, only : pack_entries

    type(vector_values) :: vec_elements

    integer :: N
    integer :: i
    integer :: nmin
    integer :: idx_range

    N = 27                ! Arbitrary (keep small for test purposes)
    nmin = -37            ! Arbitrary
    
    allocate(vec_elements%idx(N))
    allocate(vec_elements%val(N))

    do i = 1, N
      call pack_entries(vec_elements, i, nmin + (i - 1), 1.0_ccs_real)
    end do

    idx_range = maxval(vec_elements%idx) - (minval(vec_elements%idx) - 1)
    @assertEqual(idx_range, N)
    
    deallocate(vec_elements%idx, vec_elements%val)
    
  end subroutine test_vec_packing
  
end module test_vec
  
