!!! -*- mode: F90 -*-
!!! vim: set syntax=fortran:
!!!
!!!        FILE: spatial.pf
!!! DESCRIPTION: pFUnit tests of spatial discretisation schemes.

@test
subroutine test_adv_scaling()
  !! Tests that scaling the advection coefficients is equivalent to scaling
  !! the advecting velocity before applying the advection scheme, i.e.
  !!
  !!   adv(phi u) => aL, aR, rhs
  !!   adv(phi (alpha * u)) => aLS, aRS, rhsS
  !!   alpha * aL == aLS, alpha * aR == aRS, alpha * rhs == rhsS
  !!
  !! The compiler macro TESTN determines the number of randomised inputs to
  !! generate

  use funit
  use iso_fortran_env

  use constants, only : ccs_real
  use ccs_test_utils, only : ccs_test_scale, ccs_test_atol

  implicit none

  real(ccs_real) :: alpha 
  real(ccs_real) :: un
  real(ccs_real) :: coeffL, coeffR
  real(ccs_real) :: coeffLS, coeffRS

  real(ccs_real) :: expect
  integer :: iter

  do iter = 1, TESTN

     !! Get a scale factor
     call random_number(alpha) 
     alpha = ccs_test_scale(alpha)

     !! Create an advecting velocity
     call random_number(un)
     un = ccs_test_scale(un)

     call calc_adv_coeffs(coeffL, coeffR, un)           ! Unscaled input
     call calc_adv_coeffs(coeffLS, coeffRS, alpha * un) ! Scaled input

     expect = alpha * coeffL
     @assertEqual(expect, coeffLS, tolerance=ccs_test_atol(expect))
     expect = alpha * coeffR
     @assertEqual(expect, coeffRS, tolerance=ccs_test_atol(expect))
     
  end do
  
end subroutine test_adv_scaling
