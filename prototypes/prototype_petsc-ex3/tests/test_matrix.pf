!> @brief Vector unit tests.

module test_matrix

  use MPI

  use pFUnit

  use accs_types, only : matrix, matrix_init_data, matrix_values
  use accsmat, only : create_matrix
  use accs_utils, only : update, set_values
  
  implicit none

  integer, parameter :: nrows = 10        ! Number of rows per rank/domain
  integer, parameter :: stencil_width = 5 ! How many points in stencil?
  type(matrix_init_data) :: mat_sizes=matrix_init_data(rglob=-1, cglob=-1, &
       rloc=nrows, cloc=stencil_width, &
       comm=MPI_COMM_NULL)

contains

  @test(npes=[1,2,3,4])
  subroutine test_mat(this)

    class(MpiTestMethod), intent(inout) :: this
    
    class(matrix), allocatable :: M
    type(matrix_values) :: mat_values

    integer, dimension(1) :: ridx
    integer, dimension(stencil_width) :: cidx
    integer, dimension(1, stencil_width) :: val
    integer :: i, j
    integer :: nrank, comm

    nrank = this%getProcessRank()
    comm = this%getMpiCommunicator()
    
    mat_sizes%comm = comm
    call create_matrix(mat_sizes, M)

    !! Set matrix row-by-row (global entries)
    allocate(mat_values%rglob(1))
    allocate(mat_values%cglob(stencil_width))
    allocate(mat_values%val(1, stencil_width))
    do i = 1, nrows
       ridx(1) = i + nrank * nrows
       do j = 1, stencil_width
          cidx(j) = ridx(1) - (stencil_width/2) + (j - 1)
          val(1, j) = 1.0
       end do
       ridx(:) = ridx(:) - 1
       cidx(:) = cidx(:) - 1
       mat_values%rglob = ridx
       mat_values%cglob = cidx
       mat_values%val = val
       call set_values(mat_values, M)
    end do
    call update(M)

    deallocate(M)
    deallocate(mat_values%rglob)
    deallocate(mat_values%cglob)
    deallocate(mat_values%val)
    
  end subroutine test_mat
  
end module test_matrix

!!! Local Variables:
!!! mode: f90
!!! End:
