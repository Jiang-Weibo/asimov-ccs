!> @brief Vector unit tests.

module test_vector

  use pFUnit
  use petsc, only : PetscFinalize, PetscFinalize, PETSC_NULL_CHARACTER
  
  use accsvec, only : create_vector, axpy, norm
  use accs_kinds, only : accs_int, accs_real
  use accs_types, only : vector_init_data, vector
  use accs_utils, only : update

  implicit none

  integer(accs_int), parameter :: nrows = 10
  type(vector_init_data), parameter :: vec_sizes=vector_init_data(nloc=-1, nglob=nrows)

  private
  public :: test_vector_zeros, test_vector_ones
  
contains

  @test
  subroutine test_vector_zeros
    
    class(vector), allocatable :: a
    real(accs_real) :: n
    
    call create_vector(vec_sizes, a)
    call update(a)
    
    n = norm(a, 2)
    ! @assertEqual(0.0, real(n))

    deallocate(a)
    
  end subroutine test_vector_zeros

  @test
  subroutine test_vector_ones

    class(vector), allocatable :: a
    real(accs_real) :: n
    
    call create_vector(vec_sizes, a)
    call set_vec_ones(a)

    n = norm(a, 2)
    ! @assertEqual(sqrt(real(nrows)), real(n))

    deallocate(a)
    
  end subroutine test_vector_ones

  ! @test
  ! subroutine test_axpy
  ! end subroutine test_axpy

  ! @brief Helper subroutine to fill a vector with all ones.
  subroutine set_vec_ones(v)

    use accs_constants, only : add_mode
    use accs_types, only : vector_values
    use accs_utils, only : set_values
    
    class(vector), allocatable :: v

    real(accs_real), dimension(nrows) :: a
    type(vector_values) :: val_dat
    integer(accs_int) :: i
    
    val_dat%mode = add_mode
    allocate(val_dat%idx(nrows))
    allocate(val_dat%val(nrows))

    do i = 1, nrows
       val_dat%idx(i) = i - 1 ! Assuming PETSc Fortran interface is zero-indexed
    end do
    val_dat%val(:) = 1.0

    call set_values(val_dat, v)
    call update(v)

    deallocate(val_dat%idx)
    deallocate(val_dat%val)

  end subroutine set_vec_ones
  
end module test_vector
  
!!! Local Variables:
!!! mode: f90
!!! End:
